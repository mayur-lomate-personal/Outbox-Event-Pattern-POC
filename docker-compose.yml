#https://dev.to/aleksk1ng/transactional-outbox-pattern-step-by-step-with-spring-and-kotlin-3gkd
services:
  postgres:
    container_name: postgres
    image: postgres:14.5-alpine
    environment:
      POSTGRES_DB: payment
      POSTGRES_USER: mayur
      POSTGRES_PASSWORD: mayur123
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - postgres
    depends_on:
      - postgres
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/zookeeper.yml
    volumes:
      - ./docker/kafka/jmx-exporter:/usr/share/jmx_exporter/
    ports:
      - "2181:2181"
    networks:
      - kafka

  kafka-1:
    image: confluentinc/cp-kafka:7.6.1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
      - ./docker/kafka/jmx-exporter:/usr/share/jmx_exporter/
    depends_on:
      - zookeeper
    networks:
      - kafka

  kafka-2:
    image: confluentinc/cp-kafka:7.6.1
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
      - ./docker/kafka/jmx-exporter:/usr/share/jmx_exporter/
    depends_on:
      - zookeeper
    networks:
      - kafka

  kafka-3:
    image: confluentinc/cp-kafka:7.6.1
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
      - ./docker/kafka/jmx-exporter:/usr/share/jmx_exporter/
    depends_on:
      - zookeeper
    networks:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-1:19092,kafka-2:19093,kafka-3:19094"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_JMX_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/confluent_schemaregistry.yml
    volumes:
      - ./docker/kafka/jmx-exporter:/usr/share/jmx_exporter/
    networks:
      - kafka

  postgres-exporter:
    image: bitnami/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://mayur:mayur123@postgres:5432/payment?sslmode=disable"
    networks:
      - postgres
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/alerting-rules.yml:/etc/prometheus/alerting-rules.yml
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3
      - postgres
      - pgadmin
      - postgres-exporter
    networks:
      - postgres
      - kafka
      - prometheus

  grafana:
    image: grafana/grafana:9.5.2
    ports:
      - 3000:3000
    volumes:
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus
    networks:
      - prometheus

  alertmanager:
    image: bitnami/alertmanager:latest
    ports:
      - 9083:9093
    volumes:
      - ./docker/alert-manager/email-alert.yml:/opt/bitnami/alertmanager/conf/config.yml
    depends_on:
      - grafana

  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - 1025:1025
      - 8025:8025
    depends_on:
      - alertmanager

networks:
  postgres:
    driver: bridge
  kafka:
    driver: bridge
  prometheus:
    driver: bridge