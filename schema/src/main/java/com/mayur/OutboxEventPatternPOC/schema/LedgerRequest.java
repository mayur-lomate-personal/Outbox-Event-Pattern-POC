/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mayur.OutboxEventPatternPOC.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LedgerRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3196844944660250348L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LedgerRequest\",\"namespace\":\"com.mayur.OutboxEventPatternPOC.schema\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"fromAccount\",\"type\":\"string\"},{\"name\":\"toAccount\",\"type\":\"string\"},{\"name\":\"transferredAmount\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<LedgerRequest> ENCODER =
      new BinaryMessageEncoder<LedgerRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LedgerRequest> DECODER =
      new BinaryMessageDecoder<LedgerRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LedgerRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LedgerRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LedgerRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LedgerRequest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LedgerRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LedgerRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LedgerRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LedgerRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.UUID id;
  @Deprecated public java.lang.CharSequence fromAccount;
  @Deprecated public java.lang.CharSequence toAccount;
  @Deprecated public double transferredAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LedgerRequest() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param fromAccount The new value for fromAccount
   * @param toAccount The new value for toAccount
   * @param transferredAmount The new value for transferredAmount
   */
  public LedgerRequest(java.util.UUID id, java.lang.CharSequence fromAccount, java.lang.CharSequence toAccount, java.lang.Double transferredAmount) {
    this.id = id;
    this.fromAccount = fromAccount;
    this.toAccount = toAccount;
    this.transferredAmount = transferredAmount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fromAccount;
    case 2: return toAccount;
    case 3: return transferredAmount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: fromAccount = (java.lang.CharSequence)value$; break;
    case 2: toAccount = (java.lang.CharSequence)value$; break;
    case 3: transferredAmount = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fromAccount' field.
   * @return The value of the 'fromAccount' field.
   */
  public java.lang.CharSequence getFromAccount() {
    return fromAccount;
  }


  /**
   * Sets the value of the 'fromAccount' field.
   * @param value the value to set.
   */
  public void setFromAccount(java.lang.CharSequence value) {
    this.fromAccount = value;
  }

  /**
   * Gets the value of the 'toAccount' field.
   * @return The value of the 'toAccount' field.
   */
  public java.lang.CharSequence getToAccount() {
    return toAccount;
  }


  /**
   * Sets the value of the 'toAccount' field.
   * @param value the value to set.
   */
  public void setToAccount(java.lang.CharSequence value) {
    this.toAccount = value;
  }

  /**
   * Gets the value of the 'transferredAmount' field.
   * @return The value of the 'transferredAmount' field.
   */
  public double getTransferredAmount() {
    return transferredAmount;
  }


  /**
   * Sets the value of the 'transferredAmount' field.
   * @param value the value to set.
   */
  public void setTransferredAmount(double value) {
    this.transferredAmount = value;
  }

  /**
   * Creates a new LedgerRequest RecordBuilder.
   * @return A new LedgerRequest RecordBuilder
   */
  public static com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder newBuilder() {
    return new com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder();
  }

  /**
   * Creates a new LedgerRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LedgerRequest RecordBuilder
   */
  public static com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder newBuilder(com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder other) {
    if (other == null) {
      return new com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder();
    } else {
      return new com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder(other);
    }
  }

  /**
   * Creates a new LedgerRequest RecordBuilder by copying an existing LedgerRequest instance.
   * @param other The existing instance to copy.
   * @return A new LedgerRequest RecordBuilder
   */
  public static com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder newBuilder(com.mayur.OutboxEventPatternPOC.schema.LedgerRequest other) {
    if (other == null) {
      return new com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder();
    } else {
      return new com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for LedgerRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LedgerRequest>
    implements org.apache.avro.data.RecordBuilder<LedgerRequest> {

    private java.util.UUID id;
    private java.lang.CharSequence fromAccount;
    private java.lang.CharSequence toAccount;
    private double transferredAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fromAccount)) {
        this.fromAccount = data().deepCopy(fields()[1].schema(), other.fromAccount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.toAccount)) {
        this.toAccount = data().deepCopy(fields()[2].schema(), other.toAccount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transferredAmount)) {
        this.transferredAmount = data().deepCopy(fields()[3].schema(), other.transferredAmount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing LedgerRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mayur.OutboxEventPatternPOC.schema.LedgerRequest other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromAccount)) {
        this.fromAccount = data().deepCopy(fields()[1].schema(), other.fromAccount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toAccount)) {
        this.toAccount = data().deepCopy(fields()[2].schema(), other.toAccount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transferredAmount)) {
        this.transferredAmount = data().deepCopy(fields()[3].schema(), other.transferredAmount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromAccount' field.
      * @return The value.
      */
    public java.lang.CharSequence getFromAccount() {
      return fromAccount;
    }


    /**
      * Sets the value of the 'fromAccount' field.
      * @param value The value of 'fromAccount'.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder setFromAccount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fromAccount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromAccount' field has been set.
      * @return True if the 'fromAccount' field has been set, false otherwise.
      */
    public boolean hasFromAccount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fromAccount' field.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder clearFromAccount() {
      fromAccount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toAccount' field.
      * @return The value.
      */
    public java.lang.CharSequence getToAccount() {
      return toAccount;
    }


    /**
      * Sets the value of the 'toAccount' field.
      * @param value The value of 'toAccount'.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder setToAccount(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.toAccount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toAccount' field has been set.
      * @return True if the 'toAccount' field has been set, false otherwise.
      */
    public boolean hasToAccount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'toAccount' field.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder clearToAccount() {
      toAccount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transferredAmount' field.
      * @return The value.
      */
    public double getTransferredAmount() {
      return transferredAmount;
    }


    /**
      * Sets the value of the 'transferredAmount' field.
      * @param value The value of 'transferredAmount'.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder setTransferredAmount(double value) {
      validate(fields()[3], value);
      this.transferredAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transferredAmount' field has been set.
      * @return True if the 'transferredAmount' field has been set, false otherwise.
      */
    public boolean hasTransferredAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transferredAmount' field.
      * @return This builder.
      */
    public com.mayur.OutboxEventPatternPOC.schema.LedgerRequest.Builder clearTransferredAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LedgerRequest build() {
      try {
        LedgerRequest record = new LedgerRequest();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.fromAccount = fieldSetFlags()[1] ? this.fromAccount : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.toAccount = fieldSetFlags()[2] ? this.toAccount : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.transferredAmount = fieldSetFlags()[3] ? this.transferredAmount : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LedgerRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<LedgerRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LedgerRequest>
    READER$ = (org.apache.avro.io.DatumReader<LedgerRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










